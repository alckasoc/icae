  0%|                                                                          | 0/20 [00:00<?, ?it/s]`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
 10%|██████▌                                                           | 2/20 [00:00<00:04,  3.62it/s]
{'loss': 3.4531, 'grad_norm': 1.3695688247680664, 'learning_rate': 4.75e-05, 'epoch': 1.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.4219, 'grad_norm': 1.3677911758422852, 'learning_rate': 4.5e-05, 'epoch': 2.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.3906, 'grad_norm': 1.4137948751449585, 'learning_rate': 4.25e-05, 'epoch': 3.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.3281, 'grad_norm': 1.4616010189056396, 'learning_rate': 4e-05, 'epoch': 4.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.2656, 'grad_norm': 1.480325698852539, 'learning_rate': 3.7500000000000003e-05, 'epoch': 5.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.2031, 'grad_norm': 1.494032859802246, 'learning_rate': 3.5e-05, 'epoch': 6.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.1406, 'grad_norm': 1.4617177248001099, 'learning_rate': 3.2500000000000004e-05, 'epoch': 7.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.0938, 'grad_norm': 1.4025760889053345, 'learning_rate': 3e-05, 'epoch': 8.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.0469, 'grad_norm': 1.3304117918014526, 'learning_rate': 2.7500000000000004e-05, 'epoch': 9.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 3.0, 'grad_norm': 1.276092290878296, 'learning_rate': 2.5e-05, 'epoch': 10.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.9531, 'grad_norm': 1.1996486186981201, 'learning_rate': 2.25e-05, 'epoch': 11.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.9375, 'grad_norm': 1.1547733545303345, 'learning_rate': 2e-05, 'epoch': 12.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.8906, 'grad_norm': 1.1354118585586548, 'learning_rate': 1.75e-05, 'epoch': 13.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.8594, 'grad_norm': 1.0849679708480835, 'learning_rate': 1.5e-05, 'epoch': 14.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.8438, 'grad_norm': 1.0653133392333984, 'learning_rate': 1.25e-05, 'epoch': 15.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.8125, 'grad_norm': 1.0422964096069336, 'learning_rate': 1e-05, 'epoch': 16.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.8125, 'grad_norm': 1.0397902727127075, 'learning_rate': 7.5e-06, 'epoch': 17.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.7969, 'grad_norm': 1.0127053260803223, 'learning_rate': 5e-06, 'epoch': 18.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.7812, 'grad_norm': 1.006147861480713, 'learning_rate': 2.5e-06, 'epoch': 19.0}
input_ids shape:  torch.Size([1, 149])
prompt_answer_ids shape:  torch.Size([1, 279])
labels shape:  torch.Size([1, 279])
num_segments:  1
segment_length:  149
prompt_answer_embs shape:  torch.Size([1, 279, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 149
segment_input_ids shape:  torch.Size([1, 149])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 277])
mem_flag shape:  torch.Size([1, 277])
segment_input_embedding shape:  torch.Size([1, 277, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 277, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 279])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 279, 128256])
effective_logits shape:  torch.Size([278, 128256])
target_ids shape:  torch.Size([278])
{'loss': 2.7812, 'grad_norm': 1.0061315298080444, 'learning_rate': 0.0, 'epoch': 20.0}
{'train_runtime': 4.381, 'train_samples_per_second': 4.565, 'train_steps_per_second': 4.565, 'train_loss': 3.040625, 'epoch': 20.0}
***** train metrics *****
  epoch                    =       20.0
  total_flos               =        0GF
  train_loss               =     3.0406
  train_runtime            = 0:00:04.38
  train_samples_per_second =      4.565
  train_steps_per_second   =      4.565
input_ids shape:  torch.Size([1, 96])
prompt_answer_ids shape:  torch.Size([1, 226])
labels shape:  torch.Size([1, 226])
num_segments:  1
segment_length:  96
prompt_answer_embs shape:  torch.Size([1, 226, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 96
segment_input_ids shape:  torch.Size([1, 96])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 224])
mem_flag shape:  torch.Size([1, 224])
segment_input_embedding shape:  torch.Size([1, 224, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 224, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 226])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 226, 128388])
effective_logits shape:  torch.Size([225, 128388])
target_ids shape:  torch.Size([225])
100%|█████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 2576.35it/s]
***** eval metrics *****
  epoch                   =       20.0
  eval_loss               =     3.7188
  eval_runtime            = 0:00:00.06
  eval_samples_per_second =     16.305
  eval_steps_per_second   =     16.305
Finished training...
