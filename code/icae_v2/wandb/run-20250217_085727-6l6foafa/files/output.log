  0%|                                                                          | 0/20 [00:00<?, ?it/s]`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
 10%|██████▌                                                           | 2/20 [00:00<00:05,  3.02it/s]
{'loss': 2.1875, 'grad_norm': 0.6840799450874329, 'learning_rate': 4.75e-05, 'epoch': 1.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.1719, 'grad_norm': 0.6723052263259888, 'learning_rate': 4.5e-05, 'epoch': 2.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.1562, 'grad_norm': 0.6845255494117737, 'learning_rate': 4.25e-05, 'epoch': 3.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.125, 'grad_norm': 0.6800659894943237, 'learning_rate': 4e-05, 'epoch': 4.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.1094, 'grad_norm': 0.6883822083473206, 'learning_rate': 3.7500000000000003e-05, 'epoch': 5.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.0781, 'grad_norm': 0.6739365458488464, 'learning_rate': 3.5e-05, 'epoch': 6.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.0469, 'grad_norm': 0.6640763878822327, 'learning_rate': 3.2500000000000004e-05, 'epoch': 7.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 2.0156, 'grad_norm': 0.646955132484436, 'learning_rate': 3e-05, 'epoch': 8.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9922, 'grad_norm': 0.6214612126350403, 'learning_rate': 2.7500000000000004e-05, 'epoch': 9.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9766, 'grad_norm': 0.5863407850265503, 'learning_rate': 2.5e-05, 'epoch': 10.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9531, 'grad_norm': 0.5636590123176575, 'learning_rate': 2.25e-05, 'epoch': 11.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9453, 'grad_norm': 0.5338810682296753, 'learning_rate': 2e-05, 'epoch': 12.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9297, 'grad_norm': 0.5062485933303833, 'learning_rate': 1.75e-05, 'epoch': 13.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9141, 'grad_norm': 0.4719391167163849, 'learning_rate': 1.5e-05, 'epoch': 14.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.9062, 'grad_norm': 0.46545588970184326, 'learning_rate': 1.25e-05, 'epoch': 15.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.8906, 'grad_norm': 0.4482742249965668, 'learning_rate': 1e-05, 'epoch': 16.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.8906, 'grad_norm': 0.4477253258228302, 'learning_rate': 7.5e-06, 'epoch': 17.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.8828, 'grad_norm': 0.43731778860092163, 'learning_rate': 5e-06, 'epoch': 18.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.8828, 'grad_norm': 0.43360885977745056, 'learning_rate': 2.5e-06, 'epoch': 19.0}
input_ids shape:  torch.Size([1, 243])
prompt_answer_ids shape:  torch.Size([1, 373])
labels shape:  torch.Size([1, 373])
num_segments:  1
segment_length:  243
prompt_answer_embs shape:  torch.Size([1, 373, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 243
segment_input_ids shape:  torch.Size([1, 243])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 371])
mem_flag shape:  torch.Size([1, 371])
segment_input_embedding shape:  torch.Size([1, 371, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 371, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 373])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 373, 128256])
effective_logits shape:  torch.Size([372, 128256])
target_ids shape:  torch.Size([372])
{'loss': 1.875, 'grad_norm': 0.42530468106269836, 'learning_rate': 0.0, 'epoch': 20.0}
{'train_runtime': 4.4283, 'train_samples_per_second': 4.516, 'train_steps_per_second': 4.516, 'train_loss': 1.996484375, 'epoch': 20.0}
***** train metrics *****
  epoch                    =       20.0
  total_flos               =        0GF
  train_loss               =     1.9965
  train_runtime            = 0:00:04.42
  train_samples_per_second =      4.516
  train_steps_per_second   =      4.516
input_ids shape:  torch.Size([1, 131])
prompt_answer_ids shape:  torch.Size([1, 261])
labels shape:  torch.Size([1, 261])
num_segments:  1
segment_length:  131
prompt_answer_embs shape:  torch.Size([1, 261, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 131
segment_input_ids shape:  torch.Size([1, 131])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 259])
mem_flag shape:  torch.Size([1, 259])
segment_input_embedding shape:  torch.Size([1, 259, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 259, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 261])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 261, 128388])
effective_logits shape:  torch.Size([260, 128388])
target_ids shape:  torch.Size([260])
100%|█████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 2610.02it/s]
***** eval metrics *****
  epoch                   =       20.0
  eval_loss               =     3.0469
  eval_runtime            = 0:00:00.06
  eval_samples_per_second =      15.89
  eval_steps_per_second   =      15.89
Finished training...
