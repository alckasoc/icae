  0%|                                                                          | 0/20 [00:00<?, ?it/s]`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
 10%|██████▌                                                           | 2/20 [00:00<00:05,  3.13it/s]
{'loss': 3.4062, 'grad_norm': 1.1135088205337524, 'learning_rate': 4.75e-05, 'epoch': 1.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.375, 'grad_norm': 1.0596699714660645, 'learning_rate': 4.5e-05, 'epoch': 2.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.3438, 'grad_norm': 1.0831992626190186, 'learning_rate': 4.25e-05, 'epoch': 3.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.2969, 'grad_norm': 1.1032873392105103, 'learning_rate': 4e-05, 'epoch': 4.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.2656, 'grad_norm': 1.0770741701126099, 'learning_rate': 3.7500000000000003e-05, 'epoch': 5.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.2031, 'grad_norm': 1.098559856414795, 'learning_rate': 3.5e-05, 'epoch': 6.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.1719, 'grad_norm': 1.112052083015442, 'learning_rate': 3.2500000000000004e-05, 'epoch': 7.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.125, 'grad_norm': 1.1142375469207764, 'learning_rate': 3e-05, 'epoch': 8.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.0938, 'grad_norm': 1.1099591255187988, 'learning_rate': 2.7500000000000004e-05, 'epoch': 9.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.0625, 'grad_norm': 1.118127703666687, 'learning_rate': 2.5e-05, 'epoch': 10.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.0156, 'grad_norm': 1.1165693998336792, 'learning_rate': 2.25e-05, 'epoch': 11.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 3.0, 'grad_norm': 1.1703623533248901, 'learning_rate': 2e-05, 'epoch': 12.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.9688, 'grad_norm': 1.171198844909668, 'learning_rate': 1.75e-05, 'epoch': 13.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.9375, 'grad_norm': 1.1727360486984253, 'learning_rate': 1.5e-05, 'epoch': 14.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.9219, 'grad_norm': 1.219780445098877, 'learning_rate': 1.25e-05, 'epoch': 15.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.875, 'grad_norm': 1.256551742553711, 'learning_rate': 1e-05, 'epoch': 16.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.875, 'grad_norm': 1.230669379234314, 'learning_rate': 7.5e-06, 'epoch': 17.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.8594, 'grad_norm': 1.271951675415039, 'learning_rate': 5e-06, 'epoch': 18.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.8594, 'grad_norm': 1.2793141603469849, 'learning_rate': 2.5e-06, 'epoch': 19.0}
input_ids shape:  torch.Size([1, 132])
prompt_answer_ids shape:  torch.Size([1, 239])
labels shape:  torch.Size([1, 239])
num_segments:  1
segment_length:  132
prompt_answer_embs shape:  torch.Size([1, 239, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 132
segment_input_ids shape:  torch.Size([1, 132])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 260])
mem_flag shape:  torch.Size([1, 260])
segment_input_embedding shape:  torch.Size([1, 260, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 260, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 239])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 239, 128256])
effective_logits shape:  torch.Size([238, 128256])
target_ids shape:  torch.Size([238])
{'loss': 2.8438, 'grad_norm': 1.3086837530136108, 'learning_rate': 0.0, 'epoch': 20.0}
{'train_runtime': 4.4195, 'train_samples_per_second': 4.525, 'train_steps_per_second': 4.525, 'train_loss': 3.075, 'epoch': 20.0}
***** train metrics *****
  epoch                    =       20.0
  total_flos               =        0GF
  train_loss               =      3.075
  train_runtime            = 0:00:04.41
  train_samples_per_second =      4.525
  train_steps_per_second   =      4.525
input_ids shape:  torch.Size([1, 131])
prompt_answer_ids shape:  torch.Size([1, 261])
labels shape:  torch.Size([1, 261])
num_segments:  1
segment_length:  131
prompt_answer_embs shape:  torch.Size([1, 261, 2048])
max_compressed_length:  128
compress_outputs shape:  torch.Size([128, 2048])
===============Segment 0=======================
start_idx: 0 | end_idx: 131
segment_input_ids shape:  torch.Size([1, 131])
append_sequence shape:
segment_input_ids shape after concat:  torch.Size([1, 259])
mem_flag shape:  torch.Size([1, 259])
segment_input_embedding shape:  torch.Size([1, 259, 2048])
Populated segment_input_embedding memory tokens
segment_compress_outputs (last hidden state) shape:  torch.Size([1, 259, 2048])
Filled in compressed memory for memory segment 0.
===============Segment 0 END=======================
decoder_mem_flag shape:  torch.Size([1, 261])
Populated decoder memory tokens with compressed outputs.
Populated decoder special memory tokens.
decoder_outputs logits shape:  torch.Size([1, 261, 128388])
effective_logits shape:  torch.Size([260, 128388])
target_ids shape:  torch.Size([260])
100%|█████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 1615.06it/s]
***** eval metrics *****
  epoch                   =       20.0
  eval_loss               =     3.2812
  eval_runtime            = 0:00:00.06
  eval_samples_per_second =     16.486
  eval_steps_per_second   =     16.486
Finished training...
